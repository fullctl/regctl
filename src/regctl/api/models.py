# generated by fastapi-codegen:
#   filename:  docs/schema.json
#   timestamp: 2024-07-17T15:54:18+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Optional

from pydantic import AwareDatetime, BaseModel, Field
import rdap.schema.rdap as rdap_schema

"""
Normalized RDAP data models
"""

class GeoLocation(BaseModel):
    """
    Description of a geographic location
    """
    latitude: Optional[float] = None
    longitude: Optional[float] = None


class ContactRole(str, Enum):
    """
    Role of a contact
    """
    abuse = 'abuse'
    technical = 'technical'
    admin = 'admin'
    policy = 'policy'
    registrant = 'registrant'

class Contact(BaseModel):
    """
    Describes a point of contact
    """
    name: Optional[str] = None
    phone: Optional[str] = None
    email: Optional[str] = None
    roles: Optional[list[ContactRole]] = Field(default_factory=list)
    created: Optional[AwareDatetime] = Field(
        None, description='Date and time of creation'
    )
    updated: Optional[AwareDatetime] = Field(
        None, description='Date and time of last modification'
    )


class Source(BaseModel):
    """
    Describes the sources from where the data was retrieved.
    """
    handle: Optional[str] = Field(None, description='RDAP handle')
    urls: Optional[List[str]] = Field(None, description='All URLs queried for this data')
    created: Optional[AwareDatetime] = Field(
        None, description='Date and time of registration'
    )
    updated: Optional[AwareDatetime] = Field(
        None, description='Date and time of last modification'
    )


class Organization(BaseModel):
    """
    Describes an organization that owns a network
    """
    name: Optional[str] = Field(None, description='Organization name')


class Version(Enum):
    integer_4 = 4
    integer_6 = 6


class IPNetowrkStatus(Enum):
    """
    Describes the status of an IP network as active or inactive
    """
    active = 'active'
    inactive = 'inactive'


class IPNetwork(BaseModel):
    """
    Normalized IP network data
    """
    prefix: Optional[str] = Field(None, description='IP Network prefix (cidr)')
    version: Optional[Version] = Field(None, description='IP version (4 or 6)')
    name: Optional[str] = Field(None, description='Name')
    type: Optional[str] = Field(None, description='Network type')
    parent: Optional[str] = Field(None, description='Parent network (cidr)')
    contacts: Optional[List[Contact]] = Field(None, description='Points of contact')
    status: Optional[IPNetowrkStatus] = None
    sources: Optional[List[Source]] = Field(
        None, description='RDAP sources queried for this entry'
    )


class Nameserver(BaseModel):
    """
    Describes a nameserver as part of a domain
    """
    host: Optional[str] = Field(None, description='Hostname')


class DnsSec(Enum):
    secure = 'secure'
    insecure = 'insecure'
    unknown = 'unknown'


class Domain(BaseModel):
    """
    Normalized domain data
    """
    name: Optional[str] = None
    handle: Optional[str] = None
    dns_sec: Optional[DnsSec] = None
    contacts: Optional[List[Contact]] = Field(None, description='Points of contact')
    nameservers: Optional[List[Nameserver]] = Field(None, description='Nameservers')
    sources: Optional[List[Source]] = Field(
        None, description='RDAP sources for this entry'
    )


class ListPrefixAsnGetResponse(BaseModel):
    """
    List of prefixes for a given ASN
    """
    prefixes: List[str] = Field(default_factory=list, description='List of prefixes')
    sources: List[Source] = Field(default_factory=list, description='Sources for this entry')


class ListAsnPrefixGetResponse(BaseModel):
    """
    List of ASNs for a given prefix
    """
    asns: List[int] = Field(default_factory=list, description='List of ASNs')
    sources: List[Source] = Field(default_factory=list, description='Sources for this entry')


class Location(BaseModel):
    """
    Describes a physical location in terms of address and geolocation
    """
    address: Optional[str] = Field(None, description='Street address')
    suite: Optional[str] = Field(None, description='Apartment or suite number')
    floor: Optional[str] = Field(None, description='Floor number')
    postal_code: Optional[str] = Field(None, description='Postal code')
    city: Optional[str] = Field(None, description='City')
    country: Optional[str] = Field(None, description='Country code (alpha-2 ISO3166)')
    geo: Optional[GeoLocation] = Field(None, description='Geocode information')
    updated: Optional[AwareDatetime] = Field(
        None, description='Date and time of last modification'
    )


class Network(BaseModel):
    """
    Normalized network data (autnum)
    """
    asn: Optional[int] = Field(None, description='Network ASN')
    name: Optional[str] = Field(None, description='Network name')
    organization: Optional[Organization] = Field(
        None, description="Describes the network's parent organization"
    )
    locations: Optional[List[Location]] = Field(default_factory=list, description='Address and geolocation')
    contacts: Optional[List[Contact]] = Field(None, description='Points of contact')
    sources: Optional[List[Source]] = Field(
        None, description='RDAP sources for this entry'
    )
    created: Optional[AwareDatetime] = Field(
        None, description='Date and time of creation'
    )
    updated: Optional[AwareDatetime] = Field(
        None, description='Date and time of last modification'
    )


class Entity(BaseModel):
    """
    Normalized entity data
    """
    name: Optional[str] = Field(None, description='Network name')
    organization: Optional[Organization] = Field(
        None, description="Describes the network's parent organization"
    )
    locations: Optional[List[Location]] = Field(default_factory=list, description='Address and geolocation')
    contacts: Optional[List[Contact]] = Field(None, description='Points of contact')
    sources: Optional[List[Source]] = Field(
        None, description='RDAP sources for this entry'
    )


"""
RDAP passthrough response schemas

All of these are already defined as pydantic models in the rdap.schema.rdap module.

However we redefine and rename them here to make them clearly distinct in the openapi schema.
"""

class RdapLink(rdap_schema.Link):
    """
    RDAP Link response (passthrough from rdap service as is)
    """
    pass

class RdapEvent(rdap_schema.Event):
    """
    RDAP Event response (passthrough from rdap service as is)
    """
    pass

class RdapNotice(rdap_schema.Notice):
    """
    RDAP Notice response (passthrough from rdap service as is)
    """
    pass

class RdapRemark(rdap_schema.Remark):
    """
    RDAP Remark response (passthrough from rdap service as is)
    """
    pass

class RdapDSData(rdap_schema.DSData):
    """
    RDAP DSData response (passthrough from rdap service as is)
    """
    pass

class RdapSecureDNS(rdap_schema.SecureDNS):
    """
    RDAP SecureDNS response (passthrough from rdap service as is)
    """
    dsData: list[RdapDSData] = Field(default_factory=list)

class RdapNameserver(rdap_schema.Nameserver):
    """
    RDAP Nameserver response (passthrough from rdap service as is)
    """
    remarks: list[RdapRemark] = Field(default_factory=list)
    events: list[RdapEvent] = Field(default_factory=list)

class RdapEntity(rdap_schema.Entity):
    """
    RDAP Entity response (passthrough from rdap service as is)
    """
    # Links related to the entity
    links: list[RdapLink] = Field(default_factory=list)
    # Events associated with the entity
    events: list[RdapLink] = Field(default_factory=list)
    # Additional remarks about the entity
    remarks: list[RdapRemark] = Field(default_factory=list)
    # Nested entities (e.g., contacts within an organization)
    entities: list["RdapEntity"] = Field(default_factory=list)

class RdapIPNetwork(rdap_schema.IPNetwork):
    """
    RDAP IPNetwork response (passthrough from rdap service as is)
    """
    # Notices related to the IP network
    notices: list[RdapNotice] = Field(default_factory=list)
    # Additional remarks about the network
    remarks: list[RdapRemark] = Field(default_factory=list)
    # Events associated with the network
    events: list[RdapEvent] = Field(default_factory=list)
    # Links related to the network
    links: list[RdapLink] = Field(default_factory=list)
    # Entities associated with the network
    entities: list[Entity] = Field(default_factory=list)

class RdapAutNum(rdap_schema.AutNum):
    """
    RDAP AutNum response (passthrough from rdap service as is)
    """
    # Notices related to the AS number
    notices: list[RdapNotice] = Field(default_factory=list)
    # Events associated with the AS number
    events: list[RdapEvent] = Field(default_factory=list)
    # Links related to the AS number
    links: list[RdapLink] = Field(default_factory=list)
    # Entities associated with the AS number
    entities: list[RdapEntity] = Field(default_factory=list)
    # Remarks about the AS number
    remarks: list[RdapRemark] = Field(default_factory=list)

class RdapDomain(rdap_schema.Domain):
    """
    RDAP Domain response (passthrough from rdap service as is)
    """
    events: list[RdapEvent] = Field(default_factory=list)
    # Links related to the domain
    links: list[RdapLink] = Field(default_factory=list)
    # Entities associated with the domain
    entities: list[RdapEntity] = Field(default_factory=list)
    # Network information for the domain
    network: RdapIPNetwork | None = None
    secureDNS: RdapSecureDNS | None = None
    nameservers: list[RdapNameserver] = Field(default_factory=list)